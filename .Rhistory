par <- gamma_alpha_2_mu_theta(mu, nu)
u <- runif(n)
res <- qBER(p=u, mu=par[, 1], sigma=sigma, nu=par[, 2])
return(res)
}
#' Parametrization of the Random Deviations Function of the Rectangular Beta Distribution
rBER2 <- function(n, mu, sigma, nu) {
if (any(mu < 0 | mu > 1)) stop("mu must be in the interval (0, 1)")
if (any(sigma < 0))       stop("sigma must be positive")
if (any(nu < 0 | nu > 1)) stop("nu must be in the interval [0, 1]")
par <- gamma_alpha_2_mu_theta(mu, nu)
u <- runif(n)
res <- qBER(p=u, mu=par[, 1], sigma=sigma, nu=par[, 2])
return(res)
}
mu <- 0.4
sigma <- 1.5
nu <- 0.3
x <- rBER2(n= 1000, mu=mu, sigma=sigma, nu=nu)
hist(x, freq=F)
curve(dBER2(x, mu=mu, sigma=sigma, nu=nu),
col="tomato", add=T, from=0, to=1)
nu <- 0.99
x <- rBER2(n= 1000, mu=mu, sigma=sigma, nu=nu)
hist(x, freq=F)
curve(dBER2(x, mu=mu, sigma=sigma, nu=nu),
col="tomato", add=T, from=0, to=1)
nu <- 0.01
x <- rBER2(n= 1000, mu=mu, sigma=sigma, nu=nu)
hist(x, freq=F)
curve(dBER2(x, mu=mu, sigma=sigma, nu=nu),
col="tomato", add=T, from=0, to=1)
mean(x)
mu <- 0.96
sigma <- 1.5
nu <- 0.01
x <- rBER2(n= 10000, mu=mu, sigma=sigma, nu=nu)
hist(x, freq=F)
curve(dBER2(x, mu=mu, sigma=sigma, nu=nu),
col="tomato", add=T, from=0, to=1)
mean(x)
mu <- 0.06
sigma <- 1.5
nu <- 0.01
x <- rBER2(n= 10000, mu=mu, sigma=sigma, nu=nu)
hist(x, freq=F)
curve(dBER2(x, mu=mu, sigma=sigma, nu=nu),
col="tomato", add=T, from=0, to=1)
mean(x)
mu <- 0.26
sigma <- 1.5
nu <- 0.01
x <- rBER2(n= 10000, mu=mu, sigma=sigma, nu=nu)
hist(x, freq=F)
curve(dBER2(x, mu=mu, sigma=sigma, nu=nu),
col="tomato", add=T, from=0, to=1)
mean(x)
devtools::load_all()
devtools::document()
# Example 1
# Plotting the density function for different parameter values
curve(dBER2(x, mu=0.5, sigma=10, nu=0),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(dBER2(x, mu=0.5, sigma=10, nu=0.2),
add=TRUE, col= "blue1")
curve(dBER2(x, mu=0.5, sigma=10, nu=0.4),
add=TRUE, col="yellow")
curve(dBER2(x, mu=0.5, sigma=10, nu=0.6),
add=TRUE, col="red")
legend("topleft", col=c("green", "blue1", "yellow", "red"),
lty=1, bty="n",
legend=c("mu=0.5, sigma=10, nu=0",
"mu=0.5, sigma=10, nu=0.2",
"mu=0.5, sigma=10, nu=0.4",
"mu=0.5, sigma=10, nu=0.6"))
curve(dBER2(x, mu=0.3, sigma=10, nu=0),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(dBER2(x, mu=0.3, sigma=10, nu=0.2),
add=TRUE, col= "blue1")
curve(dBER2(x, mu=0.3, sigma=10, nu=0.4),
add=TRUE, col="yellow")
curve(dBER2(x, mu=0.3, sigma=10, nu=0.6),
add=TRUE, col="red")
legend("topright", col=c("green", "blue1", "yellow", "red"),
lty=1, bty="n",
legend=c("mu=0.5, sigma=10, nu=0",
"mu=0.5, sigma=10, nu=0.2",
"mu=0.5, sigma=10, nu=0.4",
"mu=0.5, sigma=10, nu=0.6"))
curve(dBER2(x, mu=0.3, sigma=10, nu=0),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(dBER2(x, mu=0.3, sigma=10, nu=0.2),
add=TRUE, col= "blue1")
curve(dBER2(x, mu=0.3, sigma=10, nu=0.4),
add=TRUE, col="yellow")
curve(dBER2(x, mu=0.3, sigma=10, nu=0.6),
add=TRUE, col="red")
legend("topright", col=c("green", "blue1", "yellow", "red"),
lty=1, bty="n",
legend=c("mu=0.3, sigma=10, nu=0",
"mu=0.3, sigma=10, nu=0.2",
"mu=0.3, sigma=10, nu=0.4",
"mu=0.3, sigma=10, nu=0.6"))
# Example 2
# Checking if the cumulative curves converge to 1
curve(pBER2(x, mu=0.5, sigma=10, nu=0),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(pBER2(x, mu=0.5, sigma=10, nu=0.2),
add=TRUE, col= "blue1")
curve(pBER2(x, mu=0.5, sigma=10, nu=0.4),
add=TRUE, col="yellow")
curve(pBER2(x, mu=0.5, sigma=10, nu=0.6),
add=TRUE, col="red")
legend("topleft", col=c("green", "blue1", "yellow", "red"),
lty=1, bty="n",
legend=c("mu=0.5, sigma=10, nu=0",
"mu=0.5, sigma=10, nu=0.2",
"mu=0.5, sigma=10, nu=0.4",
"mu=0.5, sigma=10, nu=0.6"))
# Example 3
# Checking the quantile function
mu <- 0.5
sigma <- 10
nu <- 0.4
p <- seq(from=0.01, to=0.99, length.out=100)
plot(x=qBER2(p, mu=mu, sigma=sigma, nu=nu), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pBER2(x, mu=mu, sigma=sigma, nu=nu), add=TRUE, col="red")
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rBER2(n= 10000, mu=0.5, sigma=10, nu=0.1)
hist(x, freq=FALSE)
curve(dBER2(x, mu=0.5, sigma=10, nu=0.1),
col="tomato", add=TRUE)
mean(x)
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rBER2(n= 10000, mu=0.3, sigma=10, nu=0.1)
hist(x, freq=FALSE)
curve(dBER2(x, mu=0.3, sigma=10, nu=0.1),
col="tomato", add=TRUE)
mean(x)
library(gamlss)
?WEI
?WEI2
devtools::load_all()
devtools::document()
?BER2
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.5, sigma=10, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(1234)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
plot(mod2)
wp(mod2)
Rsq(mod2)
set.seed(123)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
set.seed(1234)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
set.seed(12345)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
set.seed(123456)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=50000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos
datos$y
summary(datos$y)
datos <- gendat(n=50000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
inv_logit(-1 + 0.5*x3)
inv_logit(-1 + 0.5*0.5)
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(123456)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos$y
summary(datos$y)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
source("~/Library/CloudStorage/Dropbox/my_github/ZeroOneDists/R/BER2.R", echo = TRUE)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
source("~/Library/CloudStorage/Dropbox/my_github/ZeroOneDists/R/BER2.R", echo = TRUE)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
# A function to simulate a data set with Y ~ BER
gendat <- function(n) {
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(1234)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
# A function to simulate a data set with Y ~ BER
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(1234)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
devtools::load_all()
devtools::document()
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(123456)
datos <- gendat(n=5000)
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(123456)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos
plot(density(datos$y))
summary(datos$y)
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
devtools::load_all()
devtools::document()
devtools::install()
pkgdown::build_site()
install.packages("sn")
library(sn)
AIS
?ais
library(SN)
mod <- gamlss(Bfat~LBM, family=BER2, data=ais)
library(gamlss)
mod <- gamlss(Bfat~LBM, family=BER2, data=ais)
library(sn)
library(gamlss)
mod <- gamlss(Bfat~LBM, family=BER2, data=ais)
ais
ais
data(ais)
library(gamlss)
mod <- gamlss(Bfat~LBM, family=BER2, data=ais)
ais
ais$Bfat
ais$Bfat <- ais$Bfat/100
library(gamlss)
mod <- gamlss(Bfat~LBM, family=BER2, data=ais)
datos <- subset(ais, sport=="row")
datos
ais
ais$sport
datos <- subset(ais, sport=="Row")
datos
mod <- gamlss(Bfat~LBM, family=BER2, data=datos)
mod <- gamlss(Bfat~1, family=BER2, data=datos)
hist(datos$Bfat, freq=FALSE)
summary(datos$Bfat)
histDist(datos$Bfat, family=BER2)
source("~/Library/CloudStorage/Dropbox/my_github/ZeroOneDists/R/BER2.R", echo = TRUE)
mod <- gamlss(Bfat~1, family=BER2, data=datos)
devtools::load_all()
devtools::document()
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(123456)
datos <- gendat(n=5000)
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(123456)
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
library(sn)
data(ais)
ais$Bfat <- ais$Bfat/100
datos <- subset(ais, sport=="Row")
library(gamlss)
hist(datos$Bfat, freq=FALSE)
summary(datos$Bfat)
histDist(datos$Bfat, family=BER2)
mod <- gamlss(Bfat~1, family=BER2, data=datos)
inv_logit(-20-89)
inv_logit(-20.89)
inv_logit(-1.691)
exp(3.628)
res <- histDist(datos$Bfat, family=BER2)
res
names(res)
res$mu
res$mu.coefficients
res$mu
res$sigma
res$nu
hist(datos$Bfat, freq=FALSE)
curve(dBER2(x, mu=res$mu, sigma=res$sigma, nu=res$nu))
hist(datos$Bfat, freq=FALSE)
curve(dBER2(x, mu=res$mu, sigma=res$sigma, nu=res$nu), add=TRUE, col="blue")
res <- histDist(datos$Bfat, family=BER2)
res$mu
res$sigma
res$nu
hist(datos$Bfat, freq=FALSE)
curve(dBER2(x, mu=res$mu, sigma=res$sigma, nu=res$nu), add=TRUE, col="blue")
datos
mod <- gamlss(Bfat~1, family=BER2, data=datos)
mod <- gamlss(Bfat~1, family=BER, data=datos)
mod <- gamlss(Bfat~1, family=BE, data=datos)
mod <- gamlss(Bfat~1, family=BER, data=datos)
mod <- gamlss(Bfat~1, family=BER2, data=datos)
res$mu
res$sigma
res$nu
gamma_alpha_2_mu_theta
gamma_alpha_2_mu_theta(0.15, 0)
source("~/Library/CloudStorage/Dropbox/my_github/ZeroOneDists/R/BER2.R", echo = TRUE)
mod <- gamlss(Bfat~1, family=BER2, data=datos)
summary(mod)
mod <- gamlss(Bfat~LBM, family=BER2, data=datos)
summary(mod)
inv_logit(-36.04)
exp(4.5695)
mod <- gamlss(Bfat~LBM, family=BE, data=datos)
summary(mod)
