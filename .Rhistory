exp(log(0))
source("C:/Users/fhern/Dropbox/my_github/ZeroOneDists/R/dUPHN.R")
# Example density function of the Beta Rectangular distribution
# Example 1
curve(dUPHN(x, mu=1, sigma=1), ylim=c(0, 5),
from=0, to=1, col="black", las=1, ylab="f(x)")
curve(dUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(dUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(dUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
legend("topright", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
?dbeta
dbeta(x=0, 2, 3)
dbeta(x=1, 2, 3)
source("C:/Users/fhern/Dropbox/my_github/ZeroOneDists/R/dUPHN.R")
# Example density function of the Beta Rectangular distribution
# Example 1
curve(dUPHN(x, mu=1, sigma=1), ylim=c(0, 5),
from=0, to=1, col="black", las=1, ylab="f(x)")
# Example density function of the Beta Rectangular distribution
# Example 1
curve(dUPHN(x, mu=1, sigma=1), ylim=c(0, 5),
from=0.001, to=0.999, col="black", las=1, ylab="f(x)")
curve(dUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(dUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(dUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
legend("topright", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
# Example 2
curve(dUPHN(x, mu=1, sigma=1),
from=0, to=1, col="green", las=1, ylab="f(x)")
# Example density function of the Beta Rectangular distribution
# Example 1
curve(dUPHN(x, mu=1, sigma=1), ylim=c(0, 5),
from=0.01, to=0.99, col="black", las=1, ylab="f(x)")
curve(dUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(dUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(dUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
legend("topright", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
# Example 2
curve(dUPHN(x, mu=1, sigma=1),
from=0.01, to=0.99, col="green", las=1, ylab="f(x)")
# Example 2
curve(pUPHN(x, mu=1, sigma=1),
from=0.01, to=0.99, col="black", las=1, ylab="f(x)")
curve(pUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(pUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(pUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
# Cumulative Distribution Function of the Rectangular Beta Distribution
# Example 3
curve(pUPHN(x, mu=0.5, sigma=10),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(pUPHN(x, mu=0.5, sigma=10),
add=TRUE, col= "blue1")
curve(pUPHN(x, mu=0.5, sigma=10),
add=TRUE, col="yellow")
curve(pUPHN(x, mu=0.5, sigma=10),
add=TRUE, col="red")
# Cumulative Distribution Function of the Rectangular Beta Distribution
# Example 3
curve(pUPHN(x, mu=1, sigma=1),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(pUPHN(x, mu=2, sigma=1),
add=TRUE, col= "blue1")
curve(pUPHN(x, mu=3, sigma=2),
add=TRUE, col="yellow")
curve(pUPHN(x, mu=4, sigma=1),
add=TRUE, col="red")
# Cumulative Distribution Function of the Rectangular Beta Distribution
# Example 3
curve(pUPHN(x, mu=1, sigma=1),
from=0, to=1, col="black", las=1, ylab="f(x)")
curve(pUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(pUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(pUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
# Cumulative Distribution Function of the Rectangular Beta Distribution
# Example 3
curve(pUPHN(x, mu=1, sigma=1),
from=0, to=1, col="black", las=1, ylab="f(x)")
curve(pUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(pUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(pUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
legend("topright", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
legend("topleft", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
# Random Deviations Function of the Rectangular Beta Distribution
x <- rUPHN(n= 10000, mu=1, sigma=1)
hist(x, freq=FALSE)
curve(dUPHN(x, mu=0.5, sigma=10, nu=0.1),
col="tomato", add=TRUE, from=0, to=1)
curve(dUPHN(x, mu=1, sigma=1),
col="tomato", add=TRUE, from=0, to=1)
curve(dUPHN(x, mu=1, sigma=1),
col="tomato", add=TRUE, from=0.01, to=0.99)
# Random Deviations Function of the Rectangular Beta Distribution
x <- rUPHN(n= 10000, mu=4, sigma=1)
hist(x, freq=FALSE)
curve(dUPHN(x, mu=4, sigma=1),
col="tomato", add=TRUE, from=0.01, to=0.99)
# Example 6
curve(qUPHN(x, mu=1, sigma=1),
from=0, to=1, col="green", las=1, ylab="f(x)")
# Example 6
curve(qUPHN(x, mu=1, sigma=1),
from=0.01, to=0.99, col="green", las=1, ylab="f(x)")
curve(qUPHN(x, mu=2, sigma=1),
add=TRUE, col= "blue1")
curve(qUPHN(x, mu=3, sigma=1),
add=TRUE, col="yellow")
curve(qUPHN(x, mu=4, sigma=1),
add=TRUE, col="red")
# Example 2
# Checking if the cumulative curves converge to 1
curve(pUPHN(x, mu=1, sigma=1),
from=0.01, to=0.99, col="black", las=1, ylab="f(x)")
curve(pUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(pUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(pUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
# Example 2
# Checking if the cumulative curves converge to 1
curve(pUPHN(x, mu=1, sigma=1),
from=0.01, to=0.99, col="black", las=1, ylab="F(x)")
curve(pUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(pUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(pUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
legend("topright", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
# Example 3
# Checking the quantile function
mu <- 5
sigma <- 3
p <- seq(from=0.1, to=0.99, length.out=100)
plot(x=qUPHN(p, mu=mu, sigma=sigma, nu=nu), y=p,
xlab="Quantile", las=1, ylab="Probability")
plot(x=qUPHN(p, mu=mu, sigma=sigma), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pExWALD(x, mu=mu, sigma=sigma, nu=nu), from=0, add=TRUE, col="red")
curve(pUPHN(x, mu=mu, sigma=sigma), from=0, add=TRUE, col="red")
# Example 3
# Checking the quantile function
mu <- 5
sigma <- 3
p <- seq(from=0.1, to=0.99, length.out=100)
# Example 3
# Checking the quantile function
mu <- 2
sigma <- 3
p <- seq(from=0.1, to=0.99, length.out=100)
plot(x=qUPHN(p, mu=mu, sigma=sigma), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pUPHN(x, mu=mu, sigma=sigma), from=0, add=TRUE, col="red")
# Example 4
# Comparing the random generator output with
# the theoretical probabilities
x <- rUPHN(n= 10000, mu=4, sigma=1)
hist(x, freq=FALSE)
curve(dUPHN(x, mu=4, sigma=1),
col="tomato", add=TRUE, from=0.01, to=0.99)
# Example 3
# Checking the quantile function
mu <- 0.5
sigma <- 10
nu <- 0.4
p <- seq(from=0.1, to=0.99, length.out=100)
plot(x=qBER(p, mu=mu, sigma=sigma, nu=nu), y=p,
xlab="Quantile", las=1, ylab="Probability")
devtools::load_all()
devtools::document()
# Example 1
# Plotting the density function for different parameter values
curve(dUPHN(x, mu=1, sigma=1), ylim=c(0, 5),
from=0.01, to=0.99, col="black", las=1, ylab="f(x)")
curve(dUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(dUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(dUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
legend("topright", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
# Example 2
# Checking if the cumulative curves converge to 1
curve(pUPHN(x, mu=1, sigma=1),
from=0.01, to=0.99, col="black", las=1, ylab="F(x)")
curve(pUPHN(x, mu=2, sigma=1),
add=TRUE, col= "red")
curve(pUPHN(x, mu=3, sigma=1),
add=TRUE, col="seagreen")
curve(pUPHN(x, mu=4, sigma=1),
add=TRUE, col="royalblue2")
legend("topright", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
legend("topleft", col=c("black", "red", "seagreen", "royalblue2"),
lty=1, bty="n",
legend=c("mu=1, sigma=1",
"mu=2, sigma=1",
"mu=3, sigma=1",
"mu=4, sigma=1"))
# Example 3
# Checking the quantile function
mu <- 2
sigma <- 3
p <- seq(from=0.1, to=0.99, length.out=100)
plot(x=qUPHN(p, mu=mu, sigma=sigma), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pUPHN(x, mu=mu, sigma=sigma), from=0, add=TRUE, col="red")
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rUPHN(n= 10000, mu=4, sigma=1)
hist(x, freq=FALSE)
curve(dUPHN(x, mu=4, sigma=1),
col="tomato", add=TRUE, from=0.01, to=0.99)
# Example 1
# Plotting the density function for different parameter values
curve(dBER(x, mu=0.5, sigma=10, nu=0),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(dBER(x, mu=0.5, sigma=10, nu=0.2),
add=TRUE, col= "blue1")
curve(dBER(x, mu=0.5, sigma=10, nu=0.4),
add=TRUE, col="yellow")
curve(dBER(x, mu=0.5, sigma=10, nu=0.6),
add=TRUE, col="red")
legend("topleft", col=c("green", "blue1", "yellow", "red"),
lty=1, bty="n",
legend=c("mu=0.5, sigma=10, nu=0",
"mu=0.5, sigma=10, nu=0.2",
"mu=0.5, sigma=10, nu=0.4",
"mu=0.5, sigma=10, nu=0.6"))
curve(dBER(x, mu=0.3, sigma=10, nu=0),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(dBER(x, mu=0.3, sigma=10, nu=0.2),
add=TRUE, col= "blue1")
curve(dBER(x, mu=0.3, sigma=10, nu=0.4),
add=TRUE, col="yellow")
curve(dBER(x, mu=0.3, sigma=10, nu=0.6),
add=TRUE, col="red")
legend("topright", col=c("green", "blue1", "yellow", "red"),
lty=1, bty="n",
legend=c("mu=0.5, sigma=10, nu=0",
"mu=0.5, sigma=10, nu=0.2",
"mu=0.5, sigma=10, nu=0.4",
"mu=0.5, sigma=10, nu=0.6"))
# Example 2
# Checking if the cumulative curves converge to 1
curve(pBER(x, mu=0.5, sigma=10, nu=0),
from=0, to=1, col="green", las=1, ylab="f(x)")
curve(pBER(x, mu=0.5, sigma=10, nu=0.2),
add=TRUE, col= "blue1")
curve(pBER(x, mu=0.5, sigma=10, nu=0.4),
add=TRUE, col="yellow")
curve(pBER(x, mu=0.5, sigma=10, nu=0.6),
add=TRUE, col="red")
legend("topleft", col=c("green", "blue1", "yellow", "red"),
lty=1, bty="n",
legend=c("mu=0.5, sigma=10, nu=0",
"mu=0.5, sigma=10, nu=0.2",
"mu=0.5, sigma=10, nu=0.4",
"mu=0.5, sigma=10, nu=0.6"))
# Example 3
# Checking the quantile function
mu <- 0.5
sigma <- 10
nu <- 0.4
p <- seq(from=0.1, to=0.99, length.out=100)
plot(x=qBER(p, mu=mu, sigma=sigma, nu=nu), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pBER(x, mu=mu, sigma=sigma, nu=nu), from=0, add=TRUE, col="red")
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rBER(n= 10000, mu=0.5, sigma=10, nu=0.1)
hist(x, freq=FALSE)
curve(dBER(x, mu=0.5, sigma=10, nu=0.1),
col="tomato", add=TRUE, from=0, to=1)
# Example 1
# Plotting the density function for different parameter values
curve(dUHLG(x, mu=0.4), from=0.01, to=0.99,
ylim=c(0, 5),
col="green", las=1, ylab="f(x)")
curve(dUHLG(x, mu=1),
add=TRUE, col="blue1")
curve(dUHLG(x, mu=2),
add=TRUE, col="black")
curve(dUHLG(x, mu=7),
add=TRUE, col="red")
legend("topright",
col=c("green", "blue1", "black", "red"),
lty=1, bty="n",
legend=c("mu=0.4",
"mu=1",
"mu=2",
"mu=7"))
# Example 2
# Checking if the cumulative curves converge to 1
curve(pUHLG(x, mu=0.25),
from=0.001, to=0.999, col="green", las=1, ylab="F(x)")
curve(pUHLG(x, mu=0.7),
add=TRUE, col="blue1")
curve(pUHLG(x, mu=1.8),
add=TRUE, col="black")
curve(pUHLG(x, mu=2.2),
add=TRUE, col="red")
legend("topleft", col=c("green", "blue1", "black", "red"),
lty=1, bty="n",
legend=c("mu=0.25",
"mu=0.7",
"mu=1.8",
"mu=2.2"))
# Example 3
# Checking the quantile function
mu <- 2
p <- seq(from=0.1, to=0.99, length.out=100)
plot(x=qUHLG(p, mu=mu), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pUHLG(x, mu=mu, ), from=0, add=TRUE, col="red")
p <- seq(from=0.01, to=0.99, length.out=100)
plot(x=qUHLG(p, mu=mu), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pUHLG(x, mu=mu, ), from=0, add=TRUE, col="red")
curve(pUHLG(x, mu=mu), add=TRUE, col="red")
# Example 3
# Checking the quantile function
mu <- 2
sigma <- 3
p <- seq(from=0.01, to=0.99, length.out=100)
plot(x=qUPHN(p, mu=mu, sigma=sigma), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pUPHN(x, mu=mu, sigma=sigma), add=TRUE, col="red")
# Example 3
# Checking the quantile function
mu <- 0.5
sigma <- 10
nu <- 0.4
p <- seq(from=0.01, to=0.99, length.out=100)
plot(x=qBER(p, mu=mu, sigma=sigma, nu=nu), y=p,
xlab="Quantile", las=1, ylab="Probability")
curve(pBER(x, mu=mu, sigma=sigma, nu=nu), add=TRUE, col="red")
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rUHLG(n=10000, mu=0.5)
hist(x, freq=FALSE, main="Histograma de rUHLG",
xlab="x", ylab="Density")
curve(dUHLG(x, mu=0.5),
col="tomato", add=TRUE, from=min(x), to=max(x))
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rUHLG(n=10000, mu=0.5)
hist(x, freq=FALSE, main="Histograma de rUHLG",
xlab="x", ylab="Density")
curve(dUHLG(x, mu=0.5),
col="tomato", add=TRUE)
curve(dUHLG(x, mu=0.5),
col="tomato", add=TRUE, from=0, to=1)
curve(dUHLG(x, mu=0.5),
col="tomato", add=TRUE, from=0.01, to=0.99)
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rBER(n= 10000, mu=0.5, sigma=10, nu=0.1)
hist(x, freq=FALSE)
curve(dBER(x, mu=0.5, sigma=10, nu=0.1),
col="tomato", add=TRUE, from=0, to=1)
# Example 4
# Comparing the random generator output with
# the theoretical density
x <- rBER(n= 10000, mu=0.5, sigma=10, nu=0.1)
hist(x, freq=FALSE)
curve(dBER(x, mu=0.5, sigma=10, nu=0.1),
col="tomato", add=TRUE)
devtools::load_all()
devtools::document()
?dUPHN
devtools::load_all()
devtools::document()
source("C:/Users/fhern/Dropbox/my_github/ZeroOneDists/R/UPHN.R")
# Example 1
# Generating random values with
# known mu and sigma
require(gamlss)
mu <- 1.5
sigma <- 4.0
y <- rUPHN(10000, mu, sigma)
mod1 <- gamlss(y~1, sigma.fo=~1,  family="UPHN",
control=gamlss.control(n.cyc=5000, trace=TRUE))
source("C:/Users/fhern/Dropbox/my_github/ZeroOneDists/R/UPHN.R")
warnings()
source("C:/Users/fhern/Dropbox/my_github/ZeroOneDists/examples/examples_UPHN.R")
source("C:/Users/fhern/Dropbox/my_github/ZeroOneDists/R/UPHN.R")
mu <- 1.5
sigma <- 4.0
y <- rUPHN(10000, mu, sigma)
mod1 <- gamlss(y~1, sigma.fo=~1,  family=UPHN,
control=gamlss.control(n.cyc=5000, trace=TRUE))
exp(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
y <- rUPHN(1000, mu, sigma)
mod1 <- gamlss(y~1, sigma.fo=~1,  family=UPHN,
control=gamlss.control(n.cyc=5000, trace=TRUE))
exp(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
# A function to simulate a data set with Y ~ UPHN
gendat <- function(n) {
x1 <- runif(n)
x2 <- runif(n)
mu <- exp(0.75 - 0.69 * x1)   # Approx 1.5
sigma <- exp(0.5 - 0.64 * x2) # Approx 1.20
y <- rUPHN(n, mu, sigma)
data.frame(y=y, x1=x1, x2=x2)
}
dat <- gendat(n=200)
mod2 <- gamlss(y~x1, sigma.fo=~x2, family=UPHN, data=dat,
control=gamlss.control(n.cyc=5000, trace=TRUE))
summary(mod2)
dat <- gendat(n=2000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, family=UPHN, data=dat,
control=gamlss.control(n.cyc=5000, trace=TRUE))
summary(mod2)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::install()
pkgdown::build_site()
devtools::load_all()
devt
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
?runif
devtools::load_all()
devtools::document()
?dnorm
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::document()
devtools::install()
pkgdown::build_site()
pkgdown::build_site()
exp(0.75 - 0.69 * x1)
exp(0.75 - 0.69 * 0.5)
exp(0.5 - 0.64 * x2)
exp(0.5 - 0.64 * 0.5)
