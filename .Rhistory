res <- histDist(y, family=BER)
res <- histDist(y, family=BER)
res$mu
res$sigma
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER(n=500, mu=0.5, sigma=10, nu=0.9)
res <- histDist(y, family=BER)
res$mu
res$sigma
res$nu
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER)
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res$mu
res$sigma
res$nu
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER(n=500, mu=0.5, sigma=10, nu=0.99)
res <- histDist(y, family=BER)
res$mu
res$sigma
res$nu
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER)
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res$mu
res$sigma
res$nu
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER(n=500, mu=0.5, sigma=10, nu=0.5)
res <- histDist(y, family=BER)
res$mu
res$sigma
res$nu
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER)
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
# A function to simulate a data set with Y ~ BER
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
set.seed(1234)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
# A function to simulate a data set with Y ~ BER
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
# A function to simulate a data set with Y ~ BER
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
datos <- gendat(n=500)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.5, sigma=10, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=10, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=10, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=10, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=10, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=100, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=100, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=7, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=7, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
y <- rBER2(n=500, mu=0.5, sigma=7, nu=0.1)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.5, sigma=7, nu=0.9)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.5, sigma=7, nu=0.999)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
curve(dBER2(x, mu=0.5, sigma=7, nu=0.999))
curve(dBER2(x, mu=0.5, sigma=7, nu=0.1))
curve(dBER2(x, mu=0.5, sigma=7, nu=0.5))
curve(dBER2(x, mu=0.3, sigma=7, nu=0.5))
curve(dBER2(x, mu=0.3, sigma=70, nu=0.5))
curve(dBER2(x, mu=0.3, sigma=0.2, nu=0.5))
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.3, sigma=0.2, nu=0.5)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.3, sigma=0.2, nu=0.5)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.5, sigma=7, nu=0.999)
# Fitting the model
library(gamlss)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
# A function to simulate a data set with Y ~ BER2
gendat <- function(n) {
x1 <- runif(n, min=0.4, max=0.6)
x2 <- runif(n, min=0.4, max=0.6)
x3 <- runif(n, min=0.4, max=0.6)
mu    <- inv_logit(-0.5 + 1*x1)
sigma <- exp(-1 + 4.8*x2)
nu    <- inv_logit(-1 + 0.5*x3)
y <- rBER2(n=n, mu=mu, sigma=sigma, nu=nu)
data.frame(y=y, x1=x1, x2=x2, x3=x3)
}
datos <- gendat(n=5000)
mod2 <- gamlss(y~x1, sigma.fo=~x2, nu.fo=~x3,
family=BER2, data=datos,
control=gamlss.control(n.cyc=500, trace=TRUE))
summary(mod2)
curve(dBER2(x, mu=0.5, sigma=7, nu=0.999))
curve(dBER2(x, mu=0.5, sigma=7, nu=0.999),
ylim=c(0, 1))
# Example 1
# Generating some random values with
# known mu and sigma
y <- rBER2(n=500, mu=0.5, sigma=7, nu=0.999)
mod1 <- gamlss(y~1, family=BER2,
control=gamlss.control(n.cyc=500, trace=FALSE))
# Extracting the fitted values for mu, sigma and nu
# using the inverse link function
inv_logit <- function(x) 1/(1 + exp(-x))
inv_logit(coef(mod1, what="mu"))
exp(coef(mod1, what="sigma"))
inv_logit(coef(mod1, what="nu"))
res <- histDist(y, family=BER2)
res$mu
res$sigma
res$nu
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
pkgdown::build_site()
devtools::load_all()
devtools::document()
devtools::install()
pkgdown::build_site()
